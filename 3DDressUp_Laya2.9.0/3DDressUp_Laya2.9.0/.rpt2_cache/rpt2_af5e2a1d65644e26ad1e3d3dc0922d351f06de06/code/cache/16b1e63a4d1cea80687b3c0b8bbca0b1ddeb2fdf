{
  "code": "import { Admin, DataAdmin, Effects, EventAdmin, TimerAdmin, Tools } from \"./Lwg\";\r\nimport { _Res } from \"./_PreLoad\";\r\nexport var _MakeTailor;\r\n(function (_MakeTailor) {\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"trigger\"] = \"_MakeTailor_trigger\";\r\n        _Event[\"playAni\"] = \"_MakeTailor_playAni\";\r\n        _Event[\"scissorPlay\"] = \"_MakeTailor_scissorPlay\";\r\n        _Event[\"scissorStop\"] = \"_MakeTailor_scissorStop\";\r\n    })(_Event = _MakeTailor._Event || (_MakeTailor._Event = {}));\r\n    class DottedLine extends DataAdmin._Table {\r\n        constructor(Root, LineParent, OwnerScene) {\r\n            super();\r\n            this.Root = Root;\r\n            this.LineParent = LineParent;\r\n            this.OwnerScene = OwnerScene;\r\n            for (let index = 0; index < this.LineParent.numChildren; index++) {\r\n                const Line = this.LineParent.getChildAt(index);\r\n                if (Line.numChildren > 0) {\r\n                    let data = {};\r\n                    data['Line'] = Line;\r\n                    data[this._property.name] = Line.name;\r\n                    data[this._property.conditionNum] = Line.numChildren;\r\n                    data[this._property.degreeNum] = 0;\r\n                    this._arr.push(data);\r\n                }\r\n            }\r\n        }\r\n        removeCloth(name) {\r\n            let Cloth = this.Root.getChildByName(`Cloth${name.substr(4)}`);\r\n            if (Cloth) {\r\n                let ani = this.OwnerScene[`ani${name.substr(4)}`];\r\n                ani.play(0, false);\r\n                ani.on(Laya.Event.COMPLETE, this, () => {\r\n                    Cloth.removeSelf();\r\n                    console.log('删除节点！');\r\n                });\r\n            }\r\n            else {\r\n                console.log('当前虚线上没有可以裁剪布料，请检查');\r\n            }\r\n        }\r\n    }\r\n    _MakeTailor.DottedLine = DottedLine;\r\n    class Scissor extends Admin._ObjectBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = 'none';\r\n            this.Ani = {\r\n                shearSpeed: 4,\r\n                range: 40,\r\n                dir: 'up',\r\n                dirType: {\r\n                    up: 'up',\r\n                    down: 'down',\r\n                },\r\n                paly: () => {\r\n                    TimerAdmin._clearAll([this.Ani]);\r\n                    TimerAdmin._frameLoop(1, this.Ani, () => {\r\n                        if (this._SceneImg('S2').rotation > this.Ani.range) {\r\n                            this.Ani.dir = 'up';\r\n                        }\r\n                        else if (this._SceneImg('S2').rotation <= 0) {\r\n                            this.Ani.dir = 'down';\r\n                        }\r\n                        if (this.Ani.dir == 'up') {\r\n                            this._SceneImg('S2').rotation -= this.Ani.shearSpeed * 2;\r\n                            this._SceneImg('S1').rotation += this.Ani.shearSpeed * 2;\r\n                        }\r\n                        else if (this.Ani.dir == 'down') {\r\n                            this._SceneImg('S2').rotation += this.Ani.shearSpeed;\r\n                            this._SceneImg('S1').rotation -= this.Ani.shearSpeed;\r\n                        }\r\n                    });\r\n                },\r\n                stop: () => {\r\n                    TimerAdmin._frameOnce(60, this.Ani, () => {\r\n                        TimerAdmin._clearAll([this.Ani]);\r\n                        let time = 10;\r\n                        let angel1 = (-this.Ani.range / 3 - this._SceneImg('S1').rotation) / time;\r\n                        let angel2 = (this.Ani.range / 3 - this._SceneImg('S2').rotation) / time;\r\n                        TimerAdmin._frameNumLoop(1, time, this.Ani, () => {\r\n                            this._SceneImg('S1').rotation += angel1;\r\n                            this._SceneImg('S2').rotation += angel2;\r\n                        });\r\n                    });\r\n                },\r\n                event: () => {\r\n                    this._evReg(_Event.scissorPlay, () => {\r\n                        this.Ani.paly();\r\n                    });\r\n                    this._evReg(_Event.scissorStop, () => {\r\n                        this.Ani.stop();\r\n                    });\r\n                }\r\n            };\r\n            this.Move = {\r\n                touchP: null,\r\n                diffP: null,\r\n            };\r\n        }\r\n        lwgOnStart() {\r\n        }\r\n        lwgEvent() {\r\n            this.Ani.event();\r\n        }\r\n        lwgOnStageDown(e) {\r\n            this._evNotify(_Event.scissorPlay);\r\n            this.Move.touchP = new Laya.Point(e.stageX, e.stageY);\r\n        }\r\n        lwgOnStageMove(e) {\r\n            if (this.Move.touchP) {\r\n                this.Move.diffP = new Laya.Point(e.stageX - this.Move.touchP.x, e.stageY - this.Move.touchP.y);\r\n                this._Owner.x += this.Move.diffP.x;\r\n                this._Owner.y += this.Move.diffP.y;\r\n                this.Move.touchP = new Laya.Point(e.stageX, e.stageY);\r\n                this._evNotify(_Event.scissorPlay);\r\n            }\r\n        }\r\n        lwgOnStageUp() {\r\n            this._evNotify(_Event.scissorStop);\r\n            this.Move.touchP = null;\r\n        }\r\n        onTriggerEnter(other, _Owner) {\r\n            if (this.state == 'none' || this.state == other.owner.parent.name) {\r\n                if (!other['cut']) {\r\n                    this._evNotify(_Event.scissorPlay);\r\n                    this._evNotify(_Event.scissorStop);\r\n                    this.state = other.owner.parent.name;\r\n                    other['cut'] = true;\r\n                    EventAdmin._notify(_Event.trigger, [other.owner]);\r\n                }\r\n            }\r\n        }\r\n        onTriggerExit(other, _Owner) {\r\n            if (this.state == other.owner.parent.name) {\r\n                this.state = 'none';\r\n            }\r\n        }\r\n    }\r\n    _MakeTailor.Scissor = Scissor;\r\n    class MakeTailor extends Admin._SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.completeAni = {\r\n                ani1: () => {\r\n                    this._AniVar('complete').play(0, false);\r\n                    let _caller = {};\r\n                    TimerAdmin._frameLoop(1, _caller, () => {\r\n                        let gP = this._ImgVar('EFlower').parent.localToGlobal(new Laya.Point(this._ImgVar('EFlower').x, this._ImgVar('EFlower').y));\r\n                        Effects._Particle._fallingVertical(this._Owner, new Laya.Point(gP.x, gP.y - 40), [0, 0], null, null, [0, 360], [Effects._SkinUrl.花2], [[255, 222, 0, 1], [255, 222, 0, 1]], null, [100, 200], [0.8, 1.5], [0.05, 0.1]);\r\n                        Effects._Particle._fallingVertical(this._Owner, new Laya.Point(gP.x, gP.y), [0, 0], null, null, [0, 360], [Effects._SkinUrl.花2], [[255, 222, 0, 1], [255, 24, 0, 1]], null, [100, 200], [0.8, 1.5], [0.05, 0.1]);\r\n                    });\r\n                    this._AniVar('complete').on(Laya.Event.COMPLETE, this, () => {\r\n                        TimerAdmin._clearAll([_caller]);\r\n                    });\r\n                },\r\n                ani2: () => {\r\n                }\r\n            };\r\n        }\r\n        lwgOnAwake() {\r\n            this.DottedLineControl = new DottedLine(this._ImgVar('Root'), this._ImgVar('LineParent'), this._Owner);\r\n            this.DottedLineControl.BtnCompelet = Tools._Node.createPrefab(_Res._list.prefab2D.BtnCompelet.prefab);\r\n            this._Owner.addChild(this.DottedLineControl.BtnCompelet);\r\n            this.DottedLineControl.BtnCompelet.pos(Laya.stage.width - 100, 150);\r\n            this.DottedLineControl.BtnCompelet.visible = false;\r\n            this._ImgVar('Scissor').addComponent(Scissor);\r\n        }\r\n        lwgAdaptive() {\r\n        }\r\n        lwgEvent() {\r\n            this._evReg(_Event.trigger, (Dotted) => {\r\n                let value = this.DottedLineControl._checkCondition(Dotted.parent.name);\r\n                Dotted.visible = false;\r\n                if (value) {\r\n                    this.DottedLineControl.removeCloth(Dotted.parent.name);\r\n                    if (this.DottedLineControl._checkAllCompelet()) {\r\n                        this.completeAni.ani1();\r\n                    }\r\n                }\r\n                let Parent = Dotted.parent;\r\n                let gPos = Parent.localToGlobal(new Laya.Point(Dotted.x, Dotted.y));\r\n                if (Dotted.name == 'A') {\r\n                    if (this._ImgVar('Scissor').x <= gPos.x) {\r\n                        this._ImgVar('Scissor').rotation = Dotted.rotation;\r\n                    }\r\n                    else {\r\n                        this._ImgVar('Scissor').rotation = 180 + Dotted.rotation;\r\n                    }\r\n                }\r\n                else {\r\n                    if (this._ImgVar('Scissor').y >= gPos.y) {\r\n                        this._ImgVar('Scissor').rotation = Dotted.rotation;\r\n                    }\r\n                    else {\r\n                        this._ImgVar('Scissor').rotation = 180 + Dotted.rotation;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        lwgButton() {\r\n            this._btnUp(this._ImgVar('BtnNext'), () => {\r\n                this._openScene('MakeClothes', true, true);\r\n            });\r\n            this._btnUp(this.DottedLineControl.BtnCompelet, () => {\r\n                this._openScene('MakeClothes', true, true);\r\n            });\r\n        }\r\n    }\r\n    _MakeTailor.MakeTailor = MakeTailor;\r\n})(_MakeTailor || (_MakeTailor = {}));\r\n",
  "references": [
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/Lwg.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/_PreLoad.ts"
  ]
}
